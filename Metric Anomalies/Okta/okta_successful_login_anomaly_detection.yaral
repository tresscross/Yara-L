rule okta_successful_login_anomaly_detection {
  meta:
    author = "Jason Walker @tresscross"
    description = "Detect highly anomalous user login behavior via 30 day behavior analysis"
    tactic = "Credential Access"
    technique = "Valid Accounts"
    severity = "High"
    priority = "Medium"

  events:
    $e.metadata.event_type = "USER_LOGIN"
    $e.security_result.action = "ALLOW"
    $e.target.user.userid = $user
    $e.metadata.log_type = "OKTA"
    $e.security_result.summary = "User login to Okta" 

  match:
    $user over 1d

  outcome:
    $event_count_days_seen = max(metrics.auth_attempts_success( //counts the number days with successful login events in last 30
        period:1d, window:30d,
        metric:event_count_sum,
        agg:num_metric_periods,
        target.user.userid: $user
    ))
    $avg_event_count_window = (max(metrics.auth_attempts_success( //counts the average number of successful logins per month
        period:1d, window:30d,
        metric:event_count_sum,
        agg:avg,
        target.user.userid: $user
    )))/$event_count_days_seen

    $stddev_event_count_window = max(metrics.auth_attempts_success( //calculates the stddev of todays login count against 30 day statistics
        period:1d, window:30d,
        metric:event_count_sum, 
        agg:stddev,
        target.user.userid: $user
    ))
    $current_count = count_distinct($e.metadata.id) //number of login events today

    $anomaly_score = $current_count / $avg_event_count_window 
    //calculates how many times over today's login count is over the 30 day baseline

    $t_user = array_distinct($e.target.user.userid)

    $target_user_agent = array_distinct($e.network.http.user_agent)
    $principal_ip = array_distinct($e.principal.ip)
    $principal_ip_country = array_distinct($e.principal.ip_geo_artifact.location.country_or_region)
    $principal_ip_state = array_distinct($e.principal.ip_geo_artifact.location.state)
    $principal_ip_city = array_distinct($e.principal.location.city)
    $principal_ip_carrier = array_distinct($e.principal.ip_geo_artifact.network.carrier_name)
    $security_result_summary = array_distinct($e.security_result.summary)
    $principal_user_managers_email_addresses = array_distinct($e.target.user.managers.email_addresses)
    $target_user_email_addresses = array_distinct($e.target.user.email_addresses)
    $target_user_userid = array_distinct($e.target.user.userid)
    $log_source = array_distinct($e.metadata.log_type)

  condition:
    $e and $event_count_days_seen >= 5 and $anomaly_score > 20 and $current_count > 10
}
